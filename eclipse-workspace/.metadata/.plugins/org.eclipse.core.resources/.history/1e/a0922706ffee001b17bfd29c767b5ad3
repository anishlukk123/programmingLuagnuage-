package FinalExam;
// the time complexity is 0(n) and the space complexity is also  o(logn); 
class Question1
{
    // To heapify a subtree with root at given index
    static void MaxHeapify(int arr[], int index)
    {
        int l = 2*index + 1;
        int r = 2*index + 2;
        int largest = index;
        if (l < arr.length && arr[l] > arr[index])
            largest = l;
        if (r < arr.length && arr[r] > arr[largest])
            largest = r;
        if (largest != index)
        {
            // swap arr[i] and arr[largest]
            int temp = arr[index];
            arr[index] = arr[largest];
            arr[largest] = temp;
            MaxHeapify(arr, largest);
        }
    }
  
    // This function basically builds max heap
    static void convertMaxHeap(int arr[])
    {
        // Start from bottommost and rightmost
        // internal mode and heapify all internal
        // modes in bottom up way
        for (int i = (arr.length-2)/2; i >= 0; --i)
            MaxHeapify(arr, i);
    }
  
    // A utility function to print a given array
    // of given size
    static void printArray(int arr[])
    {
        for (int i = 0; i < arr.length;i++)
            System.out.print(arr[i]+" ");
    }
     
    // driver program
    public static void main (String[] args)
    {
        // array representing Min Heap
        int arr[] = {3, 5, 9, 6, 8, 20, 10, 12, 18, 9};

  
        System.out.print("Min Heap array : ");
        printArray(arr);
  
        convertMaxHeap(arr);
  
        System.out.print("\nMax Heap array : ");
        printArray(arr);
    }
}